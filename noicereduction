% Generate a noisy signal
Fs = 1000; % Sampling frequency
t = 0:1/Fs:1; % Time vector
f1 = 10; % Frequency of the signal
signal = sin(2*pi*f1*t);
noise = 0.5*randn(size(t)); % Gaussian noise
noisy_signal = signal + noise;

% Design different filters
fc_low = 50; % Low-pass cutoff frequency
fc_high = 150; % High-pass cutoff frequency
fc_band1 = 20; % Lower cutoff frequency for band-pass
fc_band2 = 80; % Upper cutoff frequency for band-pass

% Design low-pass filter
[b_low, a_low] = butter(6, fc_low/(Fs/2), 'low');

% Design high-pass filter
[b_high, a_high] = butter(6, fc_high/(Fs/2), 'high');

% Design band-pass filter
[b_band, a_band] = butter(6, [fc_band1 fc_band2]/(Fs/2), 'bandpass');

% Apply filters to the noisy signal
filtered_low = filter(b_low, a_low, noisy_signal);
filtered_high = filter(b_high, a_high, noisy_signal);
filtered_band = filter(b_band, a_band, noisy_signal);

% Plot original and filtered signals
figure;
subplot(4,1,1);
plot(t, noisy_signal);
title('Noisy Signal');
xlabel('Time (s)');
ylabel('Amplitude');

subplot(4,1,2);
plot(t, filtered_low);
title('Low-pass Filtered Signal');
xlabel('Time (s)');
ylabel('Amplitude');

subplot(4,1,3);
plot(t, filtered_high);
title('High-pass Filtered Signal');
xlabel('Time (s)');
ylabel('Amplitude');

subplot(4,1,4);
plot(t, filtered_band);
title('Band-pass Filtered Signal');
xlabel('Time (s)');
ylabel('Amplitude');

% Compute frequency response of filters
[H_low, f_low] = freqz(b_low, a_low, length(t), Fs);
[H_high, f_high] = freqz(b_high, a_high, length(t), Fs);
[H_band, f_band] = freqz(b_band, a_band, length(t), Fs);

